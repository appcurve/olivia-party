// Prisma (https://prisma.io) Database Schema
//
// docs: https://pris.ly/d/prisma-schema
// referential integrity: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity
// shadow databases: https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions", "fullTextSearch", "fullTextIndex"]

  // note: removed custom output as it confused webpack w/ nx
  // output          = "../src/generated/prisma-client"
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
  // shadowDatabaseUrl = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime  @default(now()) @db.Timestamptz()
  updatedAt    DateTime  @updatedAt @db.Timestamptz()
  verifiedAt   DateTime? @db.Timestamptz()
  email        String    @unique
  name         String
  password     String
  refreshToken String?

  profile UserProfile?
  app     AppProfile?

  boxProfiles BoxProfile[] // @todo associate with appProfile to explore pluggability of user + authmodule
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique

  bio    String?
  tz     String  @default("America/Toronto")
  locale String  @default("en-US")
}

model AppProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
}

// oliviaparty hardware/player ("box") profile
model BoxProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  name    String
  urlCode String

  videos      Video[]
  videoGroups VideoGroup[]

  phraseLists PhraseList[]
}

enum PhraseListSchemaVersion {
  v1 // { phrase: string, label: string, emoji: string | null }[]
}

// lists of phrases for SpeechMode's
model PhraseList {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  enabledAt DateTime? @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name          String
  schemaVersion PhraseListSchemaVersion @default(v1)
  phrases       Json                    @default("[]")
}

enum VideoPlatform {
  YOUTUBE
}

model Video {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name       String
  platform   VideoPlatform
  externalId String
  groups     VideoGroupsOnVideos[]

  @@unique([boxProfileId, platform, externalId])
}

model VideoGroup {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  enabledAt DateTime? @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name   String
  videos VideoGroupsOnVideos[]

  @@unique([boxProfileId, name])
}

model VideoGroupsOnVideos {
  video        Video      @relation(fields: [videoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  videoId      Int
  videoGroup   VideoGroup @relation(fields: [videoGroupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  videoGroupId Int

  @@id([videoId, videoGroupId])
}
