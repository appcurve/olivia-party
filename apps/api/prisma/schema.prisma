// Prisma (https://prisma.io) Database Schema
//
// docs: https://pris.ly/d/prisma-schema
// referential integrity: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity
// shadow databases: https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma-client"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
  // shadowDatabaseUrl = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int          @id @default(autoincrement())
  uuid         String       @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime     @default(now()) @db.Timestamptz()
  updatedAt    DateTime     @updatedAt @db.Timestamptz()
  verifiedAt   DateTime?    @db.Timestamptz()
  role         Role         @default(USER)
  name         String
  email        String       @unique
  password     String
  profile      UserProfile?
  refreshToken String?
  videos       Video[]
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique

  bio    String?
  tz     String  @default("America/Toronto")
  locale String  @default("en-US")
}

enum VideoPlatform {
  YOUTUBE
}

model Video {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  name       String
  platform   VideoPlatform
  externalId String
  groups     VideoGroupsOnVideos[]

  @@unique([userId, platform, externalId])
}

model VideoGroup {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name        String
  description String
  videos      VideoGroupsOnVideos[]
}

model VideoGroupsOnVideos {
  video        Video      @relation(fields: [videoId], references: [id])
  videoId      Int
  videoGroup   VideoGroup @relation(fields: [videoGroupId], references: [id])
  videoGroupId Int
  assignedAt   DateTime   @default(now()) @db.Timestamptz()
  assignedBy   String

  @@id([videoId, videoGroupId])
}
