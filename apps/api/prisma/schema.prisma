// Prisma (https://prisma.io) Database Schema
//
// docs: https://pris.ly/d/prisma-schema
// referential integrity: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity
// shadow databases: https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions", "fullTextSearch", "fullTextIndex"]

  // note: removed custom output as it confused webpack w/ nx
  // output          = "../src/generated/prisma-client"
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
  // shadowDatabaseUrl = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) create and export both plain and related models
  // "default" // do not export model without relations
  // false // do not generate related model

  modelCase   = "PascalCase" // (default) output models using pascal case (ex. UserModel, PostModel) vs. "camelCase"
  modelSuffix = "Model" // (default) suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // false // allows null assignment to optional JSON fields
}

model User {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()
  verifiedAt DateTime? @db.Timestamptz()

  email        String  @unique
  name         String
  password     String
  refreshToken String?

  profile UserProfile?
  app     AppProfile?

  boxProfiles BoxProfile[] // @todo associate with appProfile to explore pluggability of user + authmodule

  // tokens Token[] // @see below stub for Token
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique

  playerUserName String?
  playerUserYob  Int? // year of birth

  bio      String?
  timeZone String  @default("America/Toronto")
  locale   String  @default("en-US")
  currency String?
  country  String?
}

// enum TokenType {
//   EMAIL
//   API
// }
// model Token {
//   id        Int      @id @default(autoincrement())
//   uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   type TokenType

//   // token String? @unique
//   emailToken String? @unique // possibly dedicated field only for email tokens

//   valid      Boolean  @default(true)
//   expiration DateTime

//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

model Invite {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @db.Timestamptz()
  expiresAt DateTime @db.Timestamptz()
  usedAt    DateTime @db.Timestamptz()
}

model AppProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
}

// oliviaparty hardware/player ("box") profile
model BoxProfile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  name    String
  urlCode String @unique

  videos         Video[]
  videoPlaylists VideoPlaylist[]

  phraseLists PhraseList[]
}

enum PhraseListSchemaVersion {
  v1 // { phrase: string, label: string, emoji: string | null }[]
}

// list of phrases for OP-App SpeechMode
model PhraseList {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt @db.Timestamptz()
  enabledAt DateTime? @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name          String
  schemaVersion PhraseListSchemaVersion @default(v1)
  phrases       Json                    @default("[]")
}

enum VideoPlatform {
  YOUTUBE
}

model Video {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name       String
  platform   VideoPlatform
  externalId String
  playlists  VideoPlaylistsOnVideos[]

  @@unique([boxProfileId, platform, externalId])
}

// originally VideoGroup
model VideoPlaylist {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  enabledAt DateTime? @db.Timestamptz()

  boxProfile   BoxProfile @relation(fields: [boxProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxProfileId Int

  name   String
  videos VideoPlaylistsOnVideos[]

  @@unique([boxProfileId, name])
}

model VideoPlaylistsOnVideos {
  video           Video         @relation(fields: [videoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  videoId         Int
  videoPlaylist   VideoPlaylist @relation(fields: [videoPlaylistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  videoPlaylistId Int

  @@id([videoId, videoPlaylistId])
}
